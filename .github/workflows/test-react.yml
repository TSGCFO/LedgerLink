name: React Tests

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'frontend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Run Component Tests
      run: npm test -- --coverage
    
    - name: Run Accessibility Tests
      run: npm run test:a11y
    
    - name: Run Linting
      run: npm run lint
    
    - name: Build Project
      run: npm run build
      
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage/
        flags: frontend
        fail_ci_if_error: false
        
  e2e:
    runs-on: ubuntu-latest
    needs: test
    
    defaults:
      run:
        working-directory: ./frontend
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ../requirements.txt
    
    - name: Install Node Dependencies
      run: npm ci
    
    - name: Setup Database
      run: |
        cd ..
        python manage.py migrate
        python manage.py loaddata tests/fixtures/test_data.json
    
    - name: Run Backend Server
      run: |
        cd ..
        python manage.py runserver &
        sleep 5
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
    
    - name: Run Frontend Dev Server
      run: |
        npm run dev &
        sleep 10
    
    - name: Run Cypress Tests
      run: npm run cypress:run
    
    - name: Upload Cypress Screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots
        if-no-files-found: ignore